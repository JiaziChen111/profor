function outRand = randSplitNormal( obj, outDim)
% randSplitNormal - Split-Normal distributed pseudorandom numbers.
%   Generated in two steps. First, the side of the distribution is chosen given
%   the probability of a draw being from either side using a binomial
%   distribution. Second, an appropriate number of draws are generated using a
%   standard random normal kernel.
%
% See Banerjee Das (2011) Appendix A for the derivation of the probability of 
% being in the left hand side of the distribution.
%
% Input:
%   obj             [SplitNormal]
%   outDim          [numeric]           Size of the output matrix.
%
% Output:
%   outRand         [double]
%
% Usage:
%   outRand = splitNormalObj.randSplitNormal(outDim)             
%   e.g
%   outRand = splitNormalObj.randSplitNormal([10, 1000, 5])                                                            
%
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%     Copyright (C) 2014  PROFOR Team
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
%    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%% Validation.
narginchk(1, 2)

% If no output dimensions provided then return a random scalar.
if nargin == 1
    outDim = 1;
end

%% Extract some usefult parameters and initialise.
sig1            = obj.sigma1Sq^0.5;
sig2            = obj.sigma2Sq^0.5;
nRandNumber     = prod(outDim);
outRand         = zeros(nRandNumber,1);

% Calculate the probability of being in the left hand side of the distribution,
% according to Banerjee Das (2011).
probLeft        = sig1 / (sig1 + sig2);

% Create a logical index to identify which side of the distribution to draw
% from. First, draw from a binomial with the probablity equal to P(X < muMode),
% i.e. that the random variable is located in the left hand side of the
% distribution.
% This will return 0/1, 1 if sampled from the left hand side and vice versor.
idxLeft          = logical( binornd(1, probLeft, [nRandNumber, 1]));

% Count the number of draws to be made from each side.
nRightDraws         = sum(idxLeft);
nLeftDraws          = nRandNumber - sum(idxLeft);

% Exploiting the symmetry of the normal, draws for either side of the mode are
% generated by taking only the positive draws from the respective normals and
% choosing them to come from either the left or right hand side by choice of
% sigh.
outRand( idxLeft)    = -abs( randn(nRightDraws, 1) ) * sig1 + obj.muMode;
outRand(~idxLeft)    = abs(  randn(nLeftDraws,  1) ) * sig2 + obj.muMode;

% Reshape output if required.
if length(outDim)>1
    outRand       = reshape(outRand, outDim);
end

end
